#!/bin/bash

# Line Tessellation (LiTe) library
# |||Development version
# Authors: Katarzyna Adamczyk and Kiên Kiêu.
# |||Copyright INRA 2006-yyyy.
# Interdeposit Certification: IDDN.FR.001.030007.000.R.P.2015.000.31235
# License: GPL v3.

# Shell script to be used for generating a new release.
# Input argument: the release identifier e.g. 1.0, optional
# a comment describing the release.

usage() {
    echo -e "\nUsage:\n$0 release_identifier [comment]\n"
}

if [ "$#" -ne 1 ] && [ "$#" -ne 2 ]; then
    echo -e "\nShell script $0 expects one or two arguments"
    echo -e "\n$# were provided"
    usage
    exit 1
fi

rel_id=$1         # release identifier passed as first argument to script
if [ "$#" = 2 ]; then
    comment=$2    # tag comment pass as second argument to script
fi
year=`date +"%Y"` # get current year in yyyy format

# Create new Git branch and switch to it
git checkout -b release-$rel_id

# Edit file headers
# Write release identifier
find . -name .git -prune -o -type f -exec sed -i "s/|||Development version/Release $rel_id/" {} \;
# Write current year in copyright statement
find . -name .git -prune -o -type f -exec sed -i "s/|||Copyright INRA 2006-yyyy/Copyright INRA 2006-$year/" {} \;

# Edit script lite-config (version number)
sed -i "s/^version=development/version=$rel_id/" lite-config.in

# Edit documentation welcome page
sed -i "s/\(\\\copyright INRA\)/\1 2006-$year/" docfiles/index.md
sed -i "s/\\\version development/\\\version $rel_id/" docfiles/index.md

# Edit DESCRIPTION file of RLiTe
sed -i "s/^Version: 99.99/Version: $rel_id/" wrap/R/DESCRIPTION.in

# Generate R package file
mkdir -p build
cd build
mv CMakeCache.txt CMakeCache.bak
cmake -D STANDALONE_RLITE=ON ..
make rlite
mv CMakeCache.bak CMakeCache.txt 
cd -

# Tell git not to ignore the generated package file
echo '!build/wrap/R/RLiTe_*'|cat .gitignore - > .gitignore.new
rm -f .gitignore
mv .gitignore.new .gitignore

# Commit and tag
git add wrap/* # done in two steps, otherwise fails because too many files are changed
git add .
git commit -a --m "Release $rel_id"
comment="Release ${rel_id} ${comment}"
echo "COMMENT ${comment}"
echo 'git tag -a -m "'${comment}'"' "v$rel_id" 
git tag -a -m "${comment}" v$rel_id

# Return to branch master
git checkout master

echo -e "\nDone. Don't forget to push the release to remote repositories."
echo -e "For instance\n"
echo -e "git push --tags origin release-$rel_id"
